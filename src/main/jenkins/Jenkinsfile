pipeline {
    /*
        All the config axes are defined here
        Add as many lists of axes in the axisList as you need.
        All combinations will be built
    */
    def axisList = [
        ["ubuntu","rhel","windows","osx"],           //agents
        ["jdk6","jdk7","jdk8"],                      //tools
        ["banana","apple","orange","pineapple"]      //fruit
    ]



    def tasks = [:]
    def comboBuilder
    def comboEntry = []


    def task = {
        // builds and returns the task for each combination

        /* Map the entries back to a more readable format
           the index will correspond to the position of this axis in axisList[] */
        def myAgent = it[0]
        def myJdk   = it[1]
        def myFruit = it[2]

        return {
            // This is where the important work happens for each combination
            node(myAgent) {
                println "Executing combination ${it.join('-')}"
                def javaHome = tool myJdk
                println "Node=${env.NODE_NAME}"
                println "Java=${javaHome}"
            }

            //We won't declare a specific agent this part
            node {
                println "fruit=${myFruit}"
            }
        }
    }


    /*
        This is where the magic happens
        recursively work through the axisList and build all combinations
    */
    comboBuilder = { def axes, int level ->
        for ( entry in axes[0] ) {
            comboEntry[level] = entry
            if (axes.size() > 1 ) {
                comboBuilder(axes[1..-1], level + 1)
            }
            else {
                tasks[comboEntry.join("-")] = task(comboEntry.collect())
            }
        }
    }

    stage ("Setup") {
        node {
            println "Initial Setup"
        }
    }

    stage ("Setup Combinations") {
        node {
            comboBuilder(axisList, 0)
        }
    }

    stage ("Multiconfiguration Parallel Tasks") {
        //Run the tasks in parallel
        parallel tasks
    }

    stage("The End") {
        node {
            echo "That's all folks"
        }
    }
}